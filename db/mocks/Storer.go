// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	db "github.com/Coderx44/MovieTicketingPortal/db"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Storer is an autogenerated mock type for the Storer type
type Storer struct {
	mock.Mock
}

// AddBookingsBySeatId provides a mock function with given fields: ctx, seats, email, show_id, seat_num
func (_m *Storer) AddBookingsBySeatId(ctx context.Context, seats []int, email string, show_id int, seat_num []int) error {
	ret := _m.Called(ctx, seats, email, show_id, seat_num)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []int, string, int, []int) error); ok {
		r0 = rf(ctx, seats, email, show_id, seat_num)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddLocation provides a mock function with given fields: ctx, l
func (_m *Storer) AddLocation(ctx context.Context, l db.Location) (int, error) {
	ret := _m.Called(ctx, l)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, db.Location) int); ok {
		r0 = rf(ctx, l)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.Location) error); ok {
		r1 = rf(ctx, l)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddMovie provides a mock function with given fields: ctx, m
func (_m *Storer) AddMovie(ctx context.Context, m db.Movie) (uint, error) {
	ret := _m.Called(ctx, m)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, db.Movie) uint); ok {
		r0 = rf(ctx, m)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.Movie) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddMultiplex provides a mock function with given fields: ctx, m
func (_m *Storer) AddMultiplex(ctx context.Context, m db.Multiplexe) (uint, error) {
	ret := _m.Called(ctx, m)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, db.Multiplexe) uint); ok {
		r0 = rf(ctx, m)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.Multiplexe) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddScreen provides a mock function with given fields: ctx, m
func (_m *Storer) AddScreen(ctx context.Context, m db.Screen) (uint, error) {
	ret := _m.Called(ctx, m)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, db.Screen) uint); ok {
		r0 = rf(ctx, m)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.Screen) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddSeats provides a mock function with given fields: ctx, num_of_seats, show_id
func (_m *Storer) AddSeats(ctx context.Context, num_of_seats int, show_id int) error {
	ret := _m.Called(ctx, num_of_seats, show_id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, num_of_seats, show_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddShow provides a mock function with given fields: ctx, s
func (_m *Storer) AddShow(ctx context.Context, s db.Show) (uint, error) {
	ret := _m.Called(ctx, s)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, db.Show) uint); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.Show) error); ok {
		r1 = rf(ctx, s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckAvailability provides a mock function with given fields: ctx, seats
func (_m *Storer) CheckAvailability(ctx context.Context, seats []int) (bool, error) {
	ret := _m.Called(ctx, seats)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, []int) bool); ok {
		r0 = rf(ctx, seats)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []int) error); ok {
		r1 = rf(ctx, seats)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, u
func (_m *Storer) CreateUser(ctx context.Context, u db.User) (uint, error) {
	ret := _m.Called(ctx, u)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, db.User) uint); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.User) error); ok {
		r1 = rf(ctx, u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByBookingByID provides a mock function with given fields: ctx, id
func (_m *Storer) DeleteByBookingByID(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllMultiplexesByLocationID provides a mock function with given fields: ctx, location_id
func (_m *Storer) GetAllMultiplexesByLocationID(ctx context.Context, location_id int) ([]db.Multiplexe, error) {
	ret := _m.Called(ctx, location_id)

	var r0 []db.Multiplexe
	if rf, ok := ret.Get(0).(func(context.Context, int) []db.Multiplexe); ok {
		r0 = rf(ctx, location_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Multiplexe)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, location_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllShowsByDateAndMultiplexId provides a mock function with given fields: ctx, date, multiplex_id
func (_m *Storer) GetAllShowsByDateAndMultiplexId(ctx context.Context, date time.Time, multiplex_id int) ([]db.MultiplexShow, error) {
	ret := _m.Called(ctx, date, multiplex_id)

	var r0 []db.MultiplexShow
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, int) []db.MultiplexShow); ok {
		r0 = rf(ctx, date, multiplex_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.MultiplexShow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time, int) error); ok {
		r1 = rf(ctx, date, multiplex_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllShowsByMovieAndDate provides a mock function with given fields: ctx, title, city, date
func (_m *Storer) GetAllShowsByMovieAndDate(ctx context.Context, title string, city string, date time.Time) ([]db.MultiplexShow, error) {
	ret := _m.Called(ctx, title, city, date)

	var r0 []db.MultiplexShow
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time) []db.MultiplexShow); ok {
		r0 = rf(ctx, title, city, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.MultiplexShow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, time.Time) error); ok {
		r1 = rf(ctx, title, city, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvoiceDetails provides a mock function with given fields: ctx, show_id
func (_m *Storer) GetInvoiceDetails(ctx context.Context, show_id int) (db.Invoice, error) {
	ret := _m.Called(ctx, show_id)

	var r0 db.Invoice
	if rf, ok := ret.Get(0).(func(context.Context, int) db.Invoice); ok {
		r0 = rf(ctx, show_id)
	} else {
		r0 = ret.Get(0).(db.Invoice)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, show_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLocationIdByCity provides a mock function with given fields: ctx, city
func (_m *Storer) GetLocationIdByCity(ctx context.Context, city string) (db.Location, error) {
	ret := _m.Called(ctx, city)

	var r0 db.Location
	if rf, ok := ret.Get(0).(func(context.Context, string) db.Location); ok {
		r0 = rf(ctx, city)
	} else {
		r0 = ret.Get(0).(db.Location)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, city)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMovieByTitle provides a mock function with given fields: ctx, title
func (_m *Storer) GetMovieByTitle(ctx context.Context, title string) (db.Movie, error) {
	ret := _m.Called(ctx, title)

	var r0 db.Movie
	if rf, ok := ret.Get(0).(func(context.Context, string) db.Movie); ok {
		r0 = rf(ctx, title)
	} else {
		r0 = ret.Get(0).(db.Movie)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMultiplexeByID provides a mock function with given fields: ctx, id
func (_m *Storer) GetMultiplexeByID(ctx context.Context, id int) (uint, error) {
	ret := _m.Called(ctx, id)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, int) uint); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMultiplexesByName provides a mock function with given fields: ctx, name
func (_m *Storer) GetMultiplexesByName(ctx context.Context, name string) (db.Multiplexe, error) {
	ret := _m.Called(ctx, name)

	var r0 db.Multiplexe
	if rf, ok := ret.Get(0).(func(context.Context, string) db.Multiplexe); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(db.Multiplexe)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScreenByNumberAndMultiplexID provides a mock function with given fields: ctx, s_no, m_id
func (_m *Storer) GetScreenByNumberAndMultiplexID(ctx context.Context, s_no int, m_id int) (db.Screen, error) {
	ret := _m.Called(ctx, s_no, m_id)

	var r0 db.Screen
	if rf, ok := ret.Get(0).(func(context.Context, int, int) db.Screen); ok {
		r0 = rf(ctx, s_no, m_id)
	} else {
		r0 = ret.Get(0).(db.Screen)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, s_no, m_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSeatsByID provides a mock function with given fields: ctx, id
func (_m *Storer) GetSeatsByID(ctx context.Context, id []int) ([]db.Seats, error) {
	ret := _m.Called(ctx, id)

	var r0 []db.Seats
	if rf, ok := ret.Get(0).(func(context.Context, []int) []db.Seats); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Seats)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSeatsByShowID provides a mock function with given fields: ctx, id
func (_m *Storer) GetSeatsByShowID(ctx context.Context, id int) ([]db.Seats, error) {
	ret := _m.Called(ctx, id)

	var r0 []db.Seats
	if rf, ok := ret.Get(0).(func(context.Context, int) []db.Seats); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Seats)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUpcomingMovies provides a mock function with given fields: ctx, date
func (_m *Storer) GetUpcomingMovies(ctx context.Context, date string) ([]db.Movie, error) {
	ret := _m.Called(ctx, date)

	var r0 []db.Movie
	if rf, ok := ret.Get(0).(func(context.Context, string) []db.Movie); ok {
		r0 = rf(ctx, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Movie)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *Storer) GetUserByEmail(ctx context.Context, email string) (db.User, error) {
	ret := _m.Called(ctx, email)

	var r0 db.User
	if rf, ok := ret.Get(0).(func(context.Context, string) db.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStorer interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorer creates a new instance of Storer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorer(t mockConstructorTestingTNewStorer) *Storer {
	mock := &Storer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
